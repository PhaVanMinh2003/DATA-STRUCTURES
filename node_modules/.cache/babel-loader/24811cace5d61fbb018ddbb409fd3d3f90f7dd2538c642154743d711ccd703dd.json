{"ast":null,"code":"var _jsxFileName = \"/Users/phamvanminh/Workspace/academy/CTDL/DATA-STRUCTURES/algorithms-graphs/src/components/DataStructure/Tree/Tree.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tree() {\n  _s();\n  // State để lưu trữ cây (dùng object để mô phỏng cây nhị phân)\n  const [tree, setTree] = useState(null); // Cây bắt đầu rỗng\n  const [value, setValue] = useState(''); // Giá trị node nhập vào\n\n  // Thêm node vào cây (thêm đơn giản vào bên trái hoặc phải)\n  const addNode = () => {\n    const nodeValue = value.trim();\n    if (nodeValue === '') return;\n    const newNode = {\n      value: nodeValue,\n      left: null,\n      right: null\n    };\n    if (!tree) {\n      // Nếu cây rỗng, node mới là root\n      setTree(newNode);\n    } else {\n      // Thêm vào cây (đơn giản: thêm vào bên trái nếu rỗng, nếu không thì bên phải)\n      const newTree = {\n        ...tree\n      };\n      const queue = [newTree];\n      while (queue.length > 0) {\n        const current = queue.shift();\n        if (!current.left) {\n          current.left = newNode;\n          break;\n        } else if (!current.right) {\n          current.right = newNode;\n          break;\n        } else {\n          queue.push(current.left);\n          queue.push(current.right);\n        }\n      }\n      setTree(newTree);\n    }\n    setValue(''); // Reset input\n  };\n\n  // Xóa node (đơn giản: xóa node cuối cùng theo thứ tự duyệt BFS)\n  const removeNode = () => {\n    if (!tree) return;\n    const newTree = {\n      ...tree\n    };\n    const queue = [newTree];\n    const parents = new Map(); // Lưu cha của mỗi node\n\n    let lastNode = null;\n    let lastParent = null;\n\n    // Duyệt BFS để tìm node cuối cùng\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (current.left) {\n        parents.set(current.left, current);\n        queue.push(current.left);\n      }\n      if (current.right) {\n        parents.set(current.right, current);\n        queue.push(current.right);\n      }\n      lastNode = current;\n      lastParent = parents.get(current);\n    }\n\n    // Xóa node cuối cùng\n    if (lastNode === newTree) {\n      setTree(null); // Nếu chỉ có root, xóa root\n    } else if (lastParent) {\n      if (lastParent.left === lastNode) lastParent.left = null;else if (lastParent.right === lastNode) lastParent.right = null;\n      setTree(newTree);\n    }\n  };\n\n  // Hiển thị cây dưới dạng danh sách phân cấp (đơn giản)\n  const renderTree = (node, level = 0) => {\n    if (!node) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: `${level * 20}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-1 bg-success text-white rounded d-flex justify-content-between align-items-center mb-1\",\n        style: {\n          fontSize: '0.9em',\n          height: '30px',\n          maxWidth: '200px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ms-2\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), renderTree(node.left, level + 1), renderTree(node.right, level + 1)]\n    }, node.value, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container py-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center fw-bold mb-4\",\n      children: \"C\\u1EA5u tr\\xFAc d\\u1EEF li\\u1EC7u: Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"1. L\\xFD thuy\\u1EBFt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\\xE2y (Tree) l\\xE0 m\\u1ED9t c\\u1EA5u tr\\xFAc d\\u1EEF li\\u1EC7u ph\\xE2n c\\u1EA5p, g\\u1ED3m c\\xE1c **node** (n\\xFAt) \\u0111\\u01B0\\u1EE3c li\\xEAn k\\u1EBFt v\\u1EDBi nhau theo d\\u1EA1ng cha-con. Node g\\u1ED1c (root) \\u1EDF tr\\xEAn c\\xF9ng, c\\xE1c node l\\xE1 (leaf) \\u1EDF d\\u01B0\\u1EDBi c\\xF9ng. M\\u1ED7i node c\\xF3 th\\u1EC3 c\\xF3 nhi\\u1EC1u node con, nh\\u01B0ng ch\\u1EC9 c\\xF3 m\\u1ED9t node cha (tr\\u1EEB root). C\\xE2y nh\\u1ECB ph\\xE2n (Binary Tree) l\\xE0 lo\\u1EA1i ph\\u1ED5 bi\\u1EBFn, m\\u1ED7i node c\\xF3 t\\u1ED1i \\u0111a 2 con (tr\\xE1i v\\xE0 ph\\u1EA3i).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\\xE1c thao t\\xE1c c\\u01A1 b\\u1EA3n tr\\xEAn c\\xE2y g\\u1ED3m: **th\\xEAm node**, **x\\xF3a node**, **duy\\u1EC7t c\\xE2y** (theo th\\u1EE9 t\\u1EF1 tr\\u01B0\\u1EDBc - preorder, gi\\u1EEFa - inorder, sau - postorder), v\\xE0 **t\\xECm ki\\u1EBFm**. C\\xE2y \\u0111\\u01B0\\u1EE3c d\\xF9ng \\u0111\\u1EC3 bi\\u1EC3u di\\u1EC5n c\\u1EA5u tr\\xFAc ph\\xE2n c\\u1EA5p nh\\u01B0 c\\xE2y gia \\u0111\\xECnh, h\\u1EC7 th\\u1ED1ng t\\u1EC7p, ho\\u1EB7c c\\xE2y bi\\u1EC3u th\\u1EE9c.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"2. C\\xFA ph\\xE1p c\\u01A1 b\\u1EA3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Trong JavaScript, Tree kh\\xF4ng c\\xF3 c\\u1EA5u tr\\xFAc s\\u1EB5n, ta t\\u1EF1 \\u0111\\u1ECBnh ngh\\u0129a b\\u1EB1ng object v\\u1EDBi c\\xE1c thu\\u1ED9c t\\xEDnh: gi\\xE1 tr\\u1ECB node (`value`), con tr\\xE1i (`left`), v\\xE0 con ph\\u1EA3i (`right`).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"T\\u1EA1o node:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"bg-light p-3 rounded\",\n            children: `const node = { value: \"A\", left: null, right: null };`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Th\\xEAm node con:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"bg-light p-3 rounded\",\n            children: `node.left = { value: \"B\", left: null, right: null };`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Duy\\u1EC7t c\\xE2y (preorder - g\\u1ED1c, tr\\xE1i, ph\\u1EA3i):\", /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"bg-light p-3 rounded\",\n            children: `\nfunction preorder(node) {\n  if (!node) return;\n  console.log(node.value);\n  preorder(node.left);\n  preorder(node.right);\n}\n            `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"3. V\\xED d\\u1EE5 minh h\\u1ECDa b\\u1EB1ng PHP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"PHP kh\\xF4ng c\\xF3 c\\u1EA5u tr\\xFAc Tree t\\xEDch h\\u1EE3p, n\\xEAn ta m\\xF4 ph\\u1ECFng b\\u1EB1ng array ho\\u1EB7c object. D\\u01B0\\u1EDBi \\u0111\\xE2y l\\xE0 c\\xE1ch t\\u1EA1o v\\xE0 duy\\u1EC7t c\\xE2y nh\\u1ECB ph\\xE2n.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"bg-light p-3 rounded\",\n        children: `<?php\n// Định nghĩa node bằng array\n$tree = [\n    'value' => 'A',\n    'left' => [\n        'value' => 'B',\n        'left' => null,\n        'right' => null,\n    ],\n    'right' => [\n        'value' => 'C',\n        'left' => null,\n        'right' => null,\n    ],\n];\n\n// Duyệt cây theo thứ tự trước (preorder)\nfunction preorder($node) {\n    if ($node === null) return;\n    echo $node['value'] . ' ';\n    preorder($node['left']);\n    preorder($node['right']);\n}\n\npreorder($tree); // A B C\n?>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"4. Demo Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\\u01B0\\u1EDBi \\u0111\\xE2y l\\xE0 demo \\u0111\\u01A1n gi\\u1EA3n: th\\xEAm node v\\xE0o c\\xE2y nh\\u1ECB ph\\xE2n v\\xE0 x\\xF3a node cu\\u1ED1i c\\xF9ng (theo th\\u1EE9 t\\u1EF1 BFS).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control form-control-sm\",\n          value: value,\n          onChange: e => setValue(e.target.value),\n          placeholder: \"Nh\\u1EADp gi\\xE1 tr\\u1ECB node (VD: A, B)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success btn-sm mt-2\",\n          onClick: addNode,\n          children: \"Th\\xEAm Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger btn-sm mt-2 ms-2\",\n          onClick: removeNode,\n          disabled: !tree,\n          children: \"X\\xF3a Node Cu\\u1ED1i\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mb-2\",\n          children: \"C\\u1EA5u tr\\xFAc c\\xE2y (root \\u1EDF tr\\xEAn):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxWidth: '300px'\n          },\n          children: tree ? renderTree(tree) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-muted\",\n            children: \"C\\xE2y r\\u1ED7ng\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"5. \\u1EE8ng d\\u1EE5ng trong th\\u1EF1c chi\\u1EBFn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"H\\u1EC7 th\\u1ED1ng t\\u1EC7p\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), \": C\\xE2y \\u0111\\u01B0\\u1EE3c d\\xF9ng \\u0111\\u1EC3 bi\\u1EC3u di\\u1EC5n th\\u01B0 m\\u1EE5c v\\xE0 t\\u1EC7p trong h\\u1EC7 \\u0111i\\u1EC1u h\\xE0nh (VD: th\\u01B0 m\\u1EE5c g\\u1ED1c, th\\u01B0 m\\u1EE5c con, t\\u1EC7p).\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"C\\xE2y bi\\u1EC3u th\\u1EE9c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), \": Bi\\u1EC3u di\\u1EC5n bi\\u1EC3u th\\u1EE9c to\\xE1n h\\u1ECDc \\u0111\\u1EC3 t\\xEDnh to\\xE1n ho\\u1EB7c t\\u1ED1i \\u01B0u h\\xF3a (VD: (a + b) * c).\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"T\\xECm ki\\u1EBFm v\\xE0 s\\u1EAFp x\\u1EBFp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), \": C\\xE2y nh\\u1ECB ph\\xE2n t\\xECm ki\\u1EBFm (BST) gi\\xFAp t\\xECm ki\\u1EBFm v\\xE0 s\\u1EAFp x\\u1EBFp d\\u1EEF li\\u1EC7u hi\\u1EC7u qu\\u1EA3.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"DOM trong HTML\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), \": Tr\\xECnh duy\\u1EC7t s\\u1EED d\\u1EE5ng c\\xE2y DOM \\u0111\\u1EC3 bi\\u1EC3u di\\u1EC5n c\\u1EA5u tr\\xFAc trang web.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Quy\\u1EBFt \\u0111\\u1ECBnh v\\xE0 AI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), \": C\\xE2y quy\\u1EBFt \\u0111\\u1ECBnh (Decision Tree) \\u0111\\u01B0\\u1EE3c d\\xF9ng trong h\\u1ECDc m\\xE1y \\u0111\\u1EC3 ph\\xE2n lo\\u1EA1i v\\xE0 d\\u1EF1 \\u0111o\\xE1n.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\\xE2y l\\xE0 c\\u1EA5u tr\\xFAc d\\u1EEF li\\u1EC7u m\\u1EA1nh m\\u1EBD \\u0111\\u1EC3 bi\\u1EC3u di\\u1EC5n quan h\\u1EC7 ph\\xE2n c\\u1EA5p, t\\u1ED1i \\u01B0u h\\xF3a t\\xECm ki\\u1EBFm, v\\xE0 x\\u1EED l\\xFD d\\u1EEF li\\u1EC7u ph\\u1EE9c t\\u1EA1p.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(Tree, \"d1Zqef4KrT4aocbIDLEpGggZU+c=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Tree","_s","tree","setTree","value","setValue","addNode","nodeValue","trim","newNode","left","right","newTree","queue","length","current","shift","push","removeNode","parents","Map","lastNode","lastParent","set","get","renderTree","node","level","style","marginLeft","children","className","fontSize","height","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/phamvanminh/Workspace/academy/CTDL/DATA-STRUCTURES/algorithms-graphs/src/components/DataStructure/Tree/Tree.jsx"],"sourcesContent":["import { useState } from 'react';\n\nfunction Tree() {\n  // State để lưu trữ cây (dùng object để mô phỏng cây nhị phân)\n  const [tree, setTree] = useState(null); // Cây bắt đầu rỗng\n  const [value, setValue] = useState(''); // Giá trị node nhập vào\n\n  // Thêm node vào cây (thêm đơn giản vào bên trái hoặc phải)\n  const addNode = () => {\n    const nodeValue = value.trim();\n    if (nodeValue === '') return;\n\n    const newNode = { value: nodeValue, left: null, right: null };\n\n    if (!tree) {\n      // Nếu cây rỗng, node mới là root\n      setTree(newNode);\n    } else {\n      // Thêm vào cây (đơn giản: thêm vào bên trái nếu rỗng, nếu không thì bên phải)\n      const newTree = { ...tree };\n      const queue = [newTree];\n      while (queue.length > 0) {\n        const current = queue.shift();\n        if (!current.left) {\n          current.left = newNode;\n          break;\n        } else if (!current.right) {\n          current.right = newNode;\n          break;\n        } else {\n          queue.push(current.left);\n          queue.push(current.right);\n        }\n      }\n      setTree(newTree);\n    }\n    setValue(''); // Reset input\n  };\n\n  // Xóa node (đơn giản: xóa node cuối cùng theo thứ tự duyệt BFS)\n  const removeNode = () => {\n    if (!tree) return;\n\n    const newTree = { ...tree };\n    const queue = [newTree];\n    const parents = new Map(); // Lưu cha của mỗi node\n\n    let lastNode = null;\n    let lastParent = null;\n\n    // Duyệt BFS để tìm node cuối cùng\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (current.left) {\n        parents.set(current.left, current);\n        queue.push(current.left);\n      }\n      if (current.right) {\n        parents.set(current.right, current);\n        queue.push(current.right);\n      }\n      lastNode = current;\n      lastParent = parents.get(current);\n    }\n\n    // Xóa node cuối cùng\n    if (lastNode === newTree) {\n      setTree(null); // Nếu chỉ có root, xóa root\n    } else if (lastParent) {\n      if (lastParent.left === lastNode) lastParent.left = null;\n      else if (lastParent.right === lastNode) lastParent.right = null;\n      setTree(newTree);\n    }\n  };\n\n  // Hiển thị cây dưới dạng danh sách phân cấp (đơn giản)\n  const renderTree = (node, level = 0) => {\n    if (!node) return null;\n    return (\n      <div key={node.value} style={{ marginLeft: `${level * 20}px` }}>\n        <div\n          className=\"p-1 bg-success text-white rounded d-flex justify-content-between align-items-center mb-1\"\n          style={{ fontSize: '0.9em', height: '30px', maxWidth: '200px' }}\n        >\n          <span className=\"ms-2\">{node.value}</span>\n        </div>\n        {renderTree(node.left, level + 1)}\n        {renderTree(node.right, level + 1)}\n      </div>\n    );\n  };\n\n  return (\n    <section className=\"container py-4\">\n      {/* Tiêu đề lý thuyết */}\n      <h2 className=\"text-center fw-bold mb-4\">\n        Cấu trúc dữ liệu: Tree\n      </h2>\n\n      {/* Phần lý thuyết */}\n      <section className=\"mb-3\">\n        <h4>1. Lý thuyết</h4>\n        <p>\n          Cây (Tree) là một cấu trúc dữ liệu phân cấp, gồm các **node** (nút) được liên kết với nhau theo dạng cha-con. \n          Node gốc (root) ở trên cùng, các node lá (leaf) ở dưới cùng. Mỗi node có thể có nhiều node con, nhưng chỉ có một node cha (trừ root). \n          Cây nhị phân (Binary Tree) là loại phổ biến, mỗi node có tối đa 2 con (trái và phải).\n        </p>\n        <p>\n          Các thao tác cơ bản trên cây gồm: **thêm node**, **xóa node**, **duyệt cây** (theo thứ tự trước - preorder, giữa - inorder, sau - postorder), và **tìm kiếm**.\n          Cây được dùng để biểu diễn cấu trúc phân cấp như cây gia đình, hệ thống tệp, hoặc cây biểu thức.\n        </p>\n      </section>\n\n      {/* Phần cú pháp */}\n      <section className=\"mb-3\">\n        <h4>2. Cú pháp cơ bản</h4>\n        <p>\n          Trong JavaScript, Tree không có cấu trúc sẵn, ta tự định nghĩa bằng object với các thuộc tính: giá trị node (`value`), con trái (`left`), và con phải (`right`).\n        </p>\n        <ul>\n          <li>\n            Tạo node:\n            <pre className=\"bg-light p-3 rounded\">{`const node = { value: \"A\", left: null, right: null };`}</pre>\n          </li>\n          <li>\n            Thêm node con:\n            <pre className=\"bg-light p-3 rounded\">{`node.left = { value: \"B\", left: null, right: null };`}</pre>\n          </li>\n          <li>\n            Duyệt cây (preorder - gốc, trái, phải):\n            <pre className=\"bg-light p-3 rounded\">{`\nfunction preorder(node) {\n  if (!node) return;\n  console.log(node.value);\n  preorder(node.left);\n  preorder(node.right);\n}\n            `}</pre>\n          </li>\n        </ul>\n      </section>\n\n      {/* Ví dụ minh họa */}\n      <section className=\"mb-3\">\n        <h4>3. Ví dụ minh họa bằng PHP</h4>\n        <p>\n          PHP không có cấu trúc Tree tích hợp, nên ta mô phỏng bằng array hoặc object. Dưới đây là cách tạo và duyệt cây nhị phân.\n        </p>\n        <pre className=\"bg-light p-3 rounded\">\n          {`<?php\n// Định nghĩa node bằng array\n$tree = [\n    'value' => 'A',\n    'left' => [\n        'value' => 'B',\n        'left' => null,\n        'right' => null,\n    ],\n    'right' => [\n        'value' => 'C',\n        'left' => null,\n        'right' => null,\n    ],\n];\n\n// Duyệt cây theo thứ tự trước (preorder)\nfunction preorder($node) {\n    if ($node === null) return;\n    echo $node['value'] . ' ';\n    preorder($node['left']);\n    preorder($node['right']);\n}\n\npreorder($tree); // A B C\n?>`}\n        </pre>\n      </section>\n\n      {/* Demo Tree */}\n      <section className=\"mb-3\">\n        <h4>4. Demo Tree</h4>\n        <p>\n          Dưới đây là demo đơn giản: thêm node vào cây nhị phân và xóa node cuối cùng (theo thứ tự BFS).\n        </p>\n        <div className=\"mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            placeholder=\"Nhập giá trị node (VD: A, B)\"\n          />\n          <button className=\"btn btn-success btn-sm mt-2\" onClick={addNode}>\n            Thêm Node\n          </button>\n          <button\n            className=\"btn btn-danger btn-sm mt-2 ms-2\"\n            onClick={removeNode}\n            disabled={!tree}\n          >\n            Xóa Node Cuối\n          </button>\n        </div>\n\n        {/* Hiển thị cây */}\n        <div className=\"mb-3\">\n          <h5 className=\"mb-2\">Cấu trúc cây (root ở trên):</h5>\n          <div style={{ maxWidth: '300px' }}>\n            {tree ? (\n              renderTree(tree)\n            ) : (\n              <p className=\"text-muted\">Cây rỗng</p>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Ứng dụng thực tế */}\n      <section className=\"mb-3\">\n        <h4>5. Ứng dụng trong thực chiến</h4>\n        <ul>\n          <li>\n            <strong>Hệ thống tệp</strong>: Cây được dùng để biểu diễn thư mục và tệp trong hệ điều hành (VD: thư mục gốc, thư mục con, tệp).\n          </li>\n          <li>\n            <strong>Cây biểu thức</strong>: Biểu diễn biểu thức toán học để tính toán hoặc tối ưu hóa (VD: (a + b) * c).\n          </li>\n          <li>\n            <strong>Tìm kiếm và sắp xếp</strong>: Cây nhị phân tìm kiếm (BST) giúp tìm kiếm và sắp xếp dữ liệu hiệu quả.\n          </li>\n          <li>\n            <strong>DOM trong HTML</strong>: Trình duyệt sử dụng cây DOM để biểu diễn cấu trúc trang web.\n          </li>\n          <li>\n            <strong>Quyết định và AI</strong>: Cây quyết định (Decision Tree) được dùng trong học máy để phân loại và dự đoán.\n          </li>\n        </ul>\n        <p>\n          Cây là cấu trúc dữ liệu mạnh mẽ để biểu diễn quan hệ phân cấp, tối ưu hóa tìm kiếm, và xử lý dữ liệu phức tạp.\n        </p>\n      </section>\n    </section>\n  );\n}\n\nexport default Tree;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}